{"version":3,"sources":["../../../src/main/routers/report.js"],"names":["ObjectId","require","Types","ReportRouter","app","mlanghku","init","to","mongoose","connect","useNewUrlParser","db","connection","get","req","res","next","err","reports","Report","find","json","result","post","data","body","console","log","report","create","geoLocated","latitude","longitude","Router"],"mappings":";;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAGA;;;;;;;;;;;;;;AAFA,IAAIA,WAAWC,QAAQ,UAAR,EAAoBC,KAApB,CAA0BF,QAAzC;;IAIMG,Y;;;AAEJ,wBAAYC,GAAZ,EAAiBC,QAAjB,EAA0B;AAAA;;AAAA,4HAClBD,GADkB;;AAExB,UAAKA,GAAL,GAAWA,GAAX;AACA,UAAKE,IAAL;AAHwB;AAIzB;;;;2BAEK;AAAA;;AACJ,UAAIC,KAAK,KAAKA,EAAd;AACA,UAAMH,MAAM,KAAKA,GAAjB;AACAI,yBAASC,OAAT,CAAiB,iCAAjB,EAAoD,EAAEC,iBAAiB,IAAnB,EAApD;AACA,UAAIC,KAAKH,mBAASI,UAAlB;;AAEAR,UAAIS,GAAJ,CAAQ,mBAAR;AAAA,2EAA6B,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACvBC,qBADuB,WAClBC,OADkB;AAAA;AAAA,yBAEJX,GAAGY,iBAAOC,IAAP,EAAH,CAFI;;AAAA;AAAA;AAAA;AAE1BH,qBAF0B;AAErBC,yBAFqB;;AAAA,uBAGxBD,GAHwB;AAAA;AAAA;AAAA;;AAAA,mDAGXF,IAAIM,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CAHW;;AAAA;AAAA,mDAIpBP,IAAIM,IAAJ,CAAS,EAAEC,QAAQ,SAAV,EAAqBJ,SAASA,OAA9B,EAAT,CAJoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA7B;;AAAA;AAAA;AAAA;AAAA;;AAOAd,UAAImB,IAAJ,CAAS,cAAT;AAAA,4EAAyB,kBAAOT,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACjBQ,sBADiB,GACVV,IAAIW,IAAJ,CAASD,IADC;;AAEvBE,0BAAQC,GAAR,CAAYH,IAAZ;;AAEIP,qBAJmB,WAIdW,MAJc;AAAA;AAAA,yBAKDrB,GAAGY,iBAAOU,MAAP,cAAkBL,KAAKI,MAAvB,EAAkC,EAACE,YAAY,EAACC,UAAUP,KAAKO,QAAhB,EAA0BC,WAAWR,KAAKQ,SAA1C,EAAb,EAAlC,EAAH,CALC;;AAAA;AAAA;AAAA;AAKtBf,qBALsB;AAKjBW,wBALiB;;AAAA,uBAMpBX,GANoB;AAAA;AAAA;AAAA;;AAAA,oDAMPF,IAAIM,IAAJ,CAAS,EAAEC,QAAQ,QAAV,EAAT,CANO;;AAAA;AAAA,oDAOhBP,IAAIM,IAAJ,CAAS,EAAEC,QAAQ,SAAV,EAAqBM,QAAQA,MAA7B,EAAT,CAPgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAzB;;AAAA;AAAA;AAAA;AAAA;AAYD;;;;EAjCwBK,gB;;kBAsCZ9B,Y","file":"report.js","sourcesContent":["import Router from './Router';\r\nimport path from 'path';\r\nimport mongoose from 'mongoose';\r\nvar ObjectId = require('mongoose').Types.ObjectId;\r\n\r\nimport Report from '../../models/Report';\r\n\r\nclass ReportRouter extends Router {\r\n\r\n  constructor(app, mlanghku){\r\n    super(app);\r\n    this.app = app;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    var to = this.to;\r\n    const app = this.app;\r\n    mongoose.connect('mongodb://localhost/sitetracker', { useNewUrlParser: true });\r\n    var db = mongoose.connection;\r\n\r\n    app.get('/report/fetchAll/', async (req, res, next)=>{\r\n      let err, reports;\r\n      [err, reports] = await to(Report.find());\r\n      if(err){ return res.json({ result: 'failed' }) }\r\n      return res.json({ result: 'succeed', reports: reports })\r\n    });\r\n\r\n    app.post('/report/add/', async (req, res, next)=>{\r\n      const data = req.body.data;\r\n      console.log(data);\r\n\r\n      let err, report;\r\n      [err, report] = await to(Report.create({...data.report, ...{geoLocated: {latitude: data.latitude, longitude: data.longitude}} }))\r\n      if(err){ return res.json({ result: 'failed' }) }\r\n      return res.json({ result: 'succeed', report: report })\r\n    });\r\n\r\n\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default ReportRouter;\r\n"]}