{"version":3,"sources":["../../../src/main/routers/app.js"],"names":["AppRouter","app","init","upload","get","temp","storage","mongoose","connect","useNewUrlParser","db","connection","req","res","next","type","params","append","getAppend","fileName","name","filePath","path","join","console","log","download","err","post","array","headers","filenames","i","files","length","filename","splice","fs","move","json","result","status","version","Router"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;;;;;IAEMA,S;;;AAEJ,qBAAYC,GAAZ,EAAgB;AAAA;;AAAA,sHACRA,GADQ;;AAEd,UAAKA,GAAL,GAAWA,GAAX;AACA,UAAKC,IAAL;AAHc;AAIf;;;;2BAEK;AAAA;;AACJ,UAAMD,MAAM,KAAKA,GAAjB;AACA,UAAME,SAASF,IAAIG,GAAJ,CAAQ,QAAR,CAAf;AACA,UAAMC,OAAOJ,IAAIG,GAAJ,CAAQ,MAAR,CAAb;AACA,UAAME,UAAUL,IAAIG,GAAJ,CAAQ,SAAR,CAAhB;;AAEAG,yBAASC,OAAT,CAAiB,iCAAjB,EAAoD,EAAEC,iBAAiB,IAAnB,EAApD;AACA,UAAIC,KAAKH,mBAASI,UAAlB;;AAEAV,UAAIG,GAAJ,CAAQ,uBAAR,EAAiC,UAACQ,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAgB;AAC/C,YAAMC,OAAOH,IAAII,MAAJ,CAAWD,IAAxB;AACA,YAAME,SAAS,OAAKC,SAAL,CAAeH,IAAf,CAAf;AACA,YAAMI,WAAWP,IAAII,MAAJ,CAAWI,IAA5B;AACA,YAAMC,WAAWC,eAAKC,IAAL,CAAUjB,OAAV,EAAkBW,MAAlB,EAAyBE,QAAzB,CAAjB;;AAEAK,gBAAQC,GAAR,CAAY,iBAAiBJ,QAA7B;;AAEA,eAAOR,IAAIa,QAAJ,CAAaL,QAAb,EAAsBF,QAAtB,EAA+B,UAACQ,GAAD,EAAO;AAC3C,cAAGA,GAAH,EAAO;AAAEH,oBAAQC,GAAR,CAAY,qBAAZ;AAAqC;AAC/C,SAFM,CAAP;AAGD,OAXD;;AAaAxB,UAAI2B,IAAJ,CAAS,SAAT,EAAmBzB,OAAO0B,KAAP,CAAa,OAAb,CAAnB,EAA0C,UAACjB,GAAD,EAAKC,GAAL,EAAUC,IAAV,EAAiB;AACzD;;AAEA,YAAMC,OAAOH,IAAIkB,OAAJ,CAAYf,IAAzB;AACA,YAAIE,SAAS,OAAKC,SAAL,CAAeH,IAAf,CAAb;AACA,YAAIgB,YAAY,EAAhB;;AAEA,aAAI,IAAIC,IAAE,CAAV,EAAYA,IAAEpB,IAAIqB,KAAJ,CAAUC,MAAxB,EAA+BF,GAA/B,EAAmC;AACjC,cAAIG,WAAWvB,IAAIqB,KAAJ,CAAUD,CAAV,EAAaG,QAA5B;AACAJ,oBAAUK,MAAV,CAAiB,CAAjB,EAAmB,CAAnB,EAAqBD,QAArB;AACAE,4BAAGC,IAAH,CAAQjC,OAAO8B,QAAf,EAAyB7B,UAAUW,MAAV,GAAmBkB,QAA5C,EAAsD,UAACR,GAAD,EAAQ;AAC1D,gBAAGA,GAAH,EAAO;AAAEH,sBAAQC,GAAR,CAAYE,GAAZ;AAAmB;AAC/B,WAFD;AAGD;;AAED,eAAOd,IAAI0B,IAAJ,CAAS;AACdC,kBAAQ,SADM;AAEdT,qBAAWA;AAFG,SAAT,CAAP;AAID,OAnBD;;AAqBA9B,UAAIG,GAAJ,CAAQ,GAAR;AAAA,2EAAa,iBAAOQ,GAAP,EAAWC,GAAX,EAAeC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA,mDACJD,IAAI4B,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAC1BG,6BAASA;AADiB,mBAArB,CADI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAb;;AAAA;AAAA;AAAA;AAAA;AAKD;;;;EAxDqBC,gB;;kBA4DT3C,S","file":"app.js","sourcesContent":["import Router from './Router';\r\nimport {version} from '../../../package.json';\r\nimport path from 'path';\r\nimport mongoose from 'mongoose';\r\n\r\nimport fs from 'fs-extra';\r\n\r\nclass AppRouter extends Router{\r\n\r\n  constructor(app){\r\n    super(app);\r\n    this.app = app;\r\n    this.init();\r\n  }\r\n\r\n  init(){\r\n    const app = this.app;\r\n    const upload = app.get('upload');\r\n    const temp = app.get('temp');\r\n    const storage = app.get('storage');\r\n\r\n    mongoose.connect('mongodb://localhost/sitetracker', { useNewUrlParser: true });\r\n    var db = mongoose.connection;\r\n\r\n    app.get('/download/:type/:name', (req,res,next)=>{\r\n      const type = req.params.type;\r\n      const append = this.getAppend(type);\r\n      const fileName = req.params.name;\r\n      const filePath = path.join(storage,append,fileName);\r\n\r\n      console.log('Donwloading ' + filePath)\r\n\r\n      return res.download(filePath,fileName,(err)=>{\r\n        if(err){ console.log('File download error'); }\r\n      });\r\n    });\r\n\r\n    app.post('/upload',upload.array('files'), (req,res, next)=>{\r\n      //console.log('Uploaded ', req.files);\r\n\r\n      const type = req.headers.type;\r\n      var append = this.getAppend(type);\r\n      var filenames = [];\r\n\r\n      for(var i=0;i<req.files.length;i++){\r\n        var filename = req.files[i].filename;\r\n        filenames.splice(0,0,filename);\r\n        fs.move(temp + filename, storage + append + filename, (err)=> {\r\n            if(err){ console.log(err); }\r\n        });\r\n      }\r\n\r\n      return res.json({\r\n        result: 'success',\r\n        filenames: filenames\r\n      })\r\n    });\r\n\r\n    app.get('/', async (req,res,next)=>{\r\n      return res.status(200).json({\r\n        version: version\r\n      })\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport default AppRouter;\r\n"]}